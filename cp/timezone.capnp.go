// Code generated by capnpc-go. DO NOT EDIT.

package cp

import (
	math "math"

	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Coord struct{ capnp.Struct }

// Coord_TypeID is the unique identifier for the type Coord.
const Coord_TypeID = 0xa6c71d8345916b7b

func NewCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Coord{st}, err
}

func NewRootCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Coord{st}, err
}

func ReadRootCoord(msg *capnp.Message) (Coord, error) {
	root, err := msg.Root()
	return Coord{root.Struct()}, err
}

func (s Coord) String() string {
	str, _ := text.Marshal(0xa6c71d8345916b7b, s.Struct)
	return str
}

func (s Coord) Lat() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Coord) SetLat(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Coord) Lon() float32 {
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Coord) SetLon(v float32) {
	s.Struct.SetUint32(4, math.Float32bits(v))
}

// Coord_List is a list of Coord.
type Coord_List struct{ capnp.List }

// NewCoord creates a new list of Coord.
func NewCoord_List(s *capnp.Segment, sz int32) (Coord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Coord_List{l}, err
}

func (s Coord_List) At(i int) Coord { return Coord{s.List.Struct(i)} }

func (s Coord_List) Set(i int, v Coord) error { return s.List.SetStruct(i, v.Struct) }

func (s Coord_List) String() string {
	str, _ := text.MarshalList(0xa6c71d8345916b7b, s.List)
	return str
}

// Coord_Future is a wrapper for a Coord promised by a client call.
type Coord_Future struct{ *capnp.Future }

func (p Coord_Future) Struct() (Coord, error) {
	s, err := p.Future.Struct()
	return Coord{s}, err
}

type Polygon struct{ capnp.Struct }

// Polygon_TypeID is the unique identifier for the type Polygon.
const Polygon_TypeID = 0xb1b308e89f4237bf

func NewPolygon(s *capnp.Segment) (Polygon, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Polygon{st}, err
}

func NewRootPolygon(s *capnp.Segment) (Polygon, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Polygon{st}, err
}

func ReadRootPolygon(msg *capnp.Message) (Polygon, error) {
	root, err := msg.Root()
	return Polygon{root.Struct()}, err
}

func (s Polygon) String() string {
	str, _ := text.Marshal(0xb1b308e89f4237bf, s.Struct)
	return str
}

func (s Polygon) Max() (Coord, error) {
	p, err := s.Struct.Ptr(0)
	return Coord{Struct: p.Struct()}, err
}

func (s Polygon) HasMax() bool {
	return s.Struct.HasPtr(0)
}

func (s Polygon) SetMax(v Coord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMax sets the max field to a newly
// allocated Coord struct, preferring placement in s's segment.
func (s Polygon) NewMax() (Coord, error) {
	ss, err := NewCoord(s.Struct.Segment())
	if err != nil {
		return Coord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Polygon) Min() (Coord, error) {
	p, err := s.Struct.Ptr(1)
	return Coord{Struct: p.Struct()}, err
}

func (s Polygon) HasMin() bool {
	return s.Struct.HasPtr(1)
}

func (s Polygon) SetMin(v Coord) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMin sets the min field to a newly
// allocated Coord struct, preferring placement in s's segment.
func (s Polygon) NewMin() (Coord, error) {
	ss, err := NewCoord(s.Struct.Segment())
	if err != nil {
		return Coord{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Polygon) Coords() (Coord_List, error) {
	p, err := s.Struct.Ptr(2)
	return Coord_List{List: p.List()}, err
}

func (s Polygon) HasCoords() bool {
	return s.Struct.HasPtr(2)
}

func (s Polygon) SetCoords(v Coord_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewCoords sets the coords field to a newly
// allocated Coord_List, preferring placement in s's segment.
func (s Polygon) NewCoords(n int32) (Coord_List, error) {
	l, err := NewCoord_List(s.Struct.Segment(), n)
	if err != nil {
		return Coord_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Polygon_List is a list of Polygon.
type Polygon_List struct{ capnp.List }

// NewPolygon creates a new list of Polygon.
func NewPolygon_List(s *capnp.Segment, sz int32) (Polygon_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Polygon_List{l}, err
}

func (s Polygon_List) At(i int) Polygon { return Polygon{s.List.Struct(i)} }

func (s Polygon_List) Set(i int, v Polygon) error { return s.List.SetStruct(i, v.Struct) }

func (s Polygon_List) String() string {
	str, _ := text.MarshalList(0xb1b308e89f4237bf, s.List)
	return str
}

// Polygon_Future is a wrapper for a Polygon promised by a client call.
type Polygon_Future struct{ *capnp.Future }

func (p Polygon_Future) Struct() (Polygon, error) {
	s, err := p.Future.Struct()
	return Polygon{s}, err
}

func (p Polygon_Future) Max() Coord_Future {
	return Coord_Future{Future: p.Future.Field(0, nil)}
}

func (p Polygon_Future) Min() Coord_Future {
	return Coord_Future{Future: p.Future.Field(1, nil)}
}

type PolygonIndex struct{ capnp.Struct }

// PolygonIndex_TypeID is the unique identifier for the type PolygonIndex.
const PolygonIndex_TypeID = 0xf7e516726966c831

func NewPolygonIndex(s *capnp.Segment) (PolygonIndex, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PolygonIndex{st}, err
}

func NewRootPolygonIndex(s *capnp.Segment) (PolygonIndex, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return PolygonIndex{st}, err
}

func ReadRootPolygonIndex(msg *capnp.Message) (PolygonIndex, error) {
	root, err := msg.Root()
	return PolygonIndex{root.Struct()}, err
}

func (s PolygonIndex) String() string {
	str, _ := text.Marshal(0xf7e516726966c831, s.Struct)
	return str
}

func (s PolygonIndex) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s PolygonIndex) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PolygonIndex) Max() (Coord, error) {
	p, err := s.Struct.Ptr(0)
	return Coord{Struct: p.Struct()}, err
}

func (s PolygonIndex) HasMax() bool {
	return s.Struct.HasPtr(0)
}

func (s PolygonIndex) SetMax(v Coord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMax sets the max field to a newly
// allocated Coord struct, preferring placement in s's segment.
func (s PolygonIndex) NewMax() (Coord, error) {
	ss, err := NewCoord(s.Struct.Segment())
	if err != nil {
		return Coord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PolygonIndex) Min() (Coord, error) {
	p, err := s.Struct.Ptr(1)
	return Coord{Struct: p.Struct()}, err
}

func (s PolygonIndex) HasMin() bool {
	return s.Struct.HasPtr(1)
}

func (s PolygonIndex) SetMin(v Coord) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewMin sets the min field to a newly
// allocated Coord struct, preferring placement in s's segment.
func (s PolygonIndex) NewMin() (Coord, error) {
	ss, err := NewCoord(s.Struct.Segment())
	if err != nil {
		return Coord{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s PolygonIndex) Tzid() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s PolygonIndex) HasTzid() bool {
	return s.Struct.HasPtr(2)
}

func (s PolygonIndex) TzidBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s PolygonIndex) SetTzid(v string) error {
	return s.Struct.SetText(2, v)
}

// PolygonIndex_List is a list of PolygonIndex.
type PolygonIndex_List struct{ capnp.List }

// NewPolygonIndex creates a new list of PolygonIndex.
func NewPolygonIndex_List(s *capnp.Segment, sz int32) (PolygonIndex_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return PolygonIndex_List{l}, err
}

func (s PolygonIndex_List) At(i int) PolygonIndex { return PolygonIndex{s.List.Struct(i)} }

func (s PolygonIndex_List) Set(i int, v PolygonIndex) error { return s.List.SetStruct(i, v.Struct) }

func (s PolygonIndex_List) String() string {
	str, _ := text.MarshalList(0xf7e516726966c831, s.List)
	return str
}

// PolygonIndex_Future is a wrapper for a PolygonIndex promised by a client call.
type PolygonIndex_Future struct{ *capnp.Future }

func (p PolygonIndex_Future) Struct() (PolygonIndex, error) {
	s, err := p.Future.Struct()
	return PolygonIndex{s}, err
}

func (p PolygonIndex_Future) Max() Coord_Future {
	return Coord_Future{Future: p.Future.Field(0, nil)}
}

func (p PolygonIndex_Future) Min() Coord_Future {
	return Coord_Future{Future: p.Future.Field(1, nil)}
}

const schema_cc3309152ef8d9f0 = "x\xda\x94\x90\xbf\x8a\x13Q\x18\xc5\xcf\xf9n\xe2l\x96" +
	"\xb03\xc3D\x0bq\x0bE\xc1\x15v1\xa8\x08\xdb\xec" +
	"\xa2\x06\x0c(\xcc\xd7[8dF38\x7fB\x1c0" +
	"F,D|\x00\x9f\xc0\xce\xc2F\xc4\xce\xc6R\x0b_" +
	"\xc0V\x10-,\xec\xb4\x1b\xb9\x86\xc4\x90Tv\x87s" +
	"\x0f?~\xdf\xf5~\x1cJ\xb7Y\x0a\xa0'\x9aG\xea" +
	"G\xf7\x9e\xf7\x9en\x7fx\x09u\xc9\xfa\xe7\xe7\xdf{" +
	"G[\x17>\xa1\xe1\x00\xc16_\x05gh\xd3I>" +
	"\x00\xeb\xf7\x97\xaf\xbc\xf8\xbe\xf1\xf6\x0d|wi\xda4" +
	"v\xf1\x98\xef\x82g\x7f\xb7O\xf8\x1a\xac\xbb\x1f\xef\xa4" +
	"\xe3c_\x7f\xadpg\xe3\x1d\xf9\x12\\\x12\x9b\xba\xf2" +
	"\x0d\xbbu\x95\xe6\xc9\xb4,\x12\xee\x0d\xa2Q1\xda\xbf" +
	"\xea\x96\xe58\x0eI\xdd0\x0d\xa0A\xc0\xdf9\x05\xe8" +
	"iC=/\xf4\xc9\x0em\xb9k\xcb\xb3\x86zQ\xe8" +
	"dQ\xc5M\x087A'+\x8by^\xa3\x87\x07e" +
	"\xf6\xf0nYX~{\xc1\xefY\xd4\xa1\xa1\xdeX\xe2" +
	"\xf7my\xcdPC\xa1/\xd2\xa1\x00\xfe\xcd}@\xaf" +
	"\x1bj,t\xf2hB\xef\xdf/\x82\xf4@'O\x8b" +
	"\xf5\xf6``\xaf\xba\xcf-04\\y\xdfZ\x12\x95" +
	"\xb9\xe8\xcc\xb3_8q2\xb1\xb6\xde\xc26:\x0e\xe8" +
	"-C\x1d\x0a\xe7\xb2\x89\x95\xbdm\xa8\x99\x95\xe5L6" +
	"\xb5el\xa8#\xa1o\xa4C\x03\xf8\xf99@\x87\x86" +
	"Z\x09M\x1a\xb3\x05a\x0b\xffu\x8c[M\xd3\x98m" +
	"\x08\xdb\xe0\x9f\x00\x00\x00\xff\xffA\x80\x82="

func init() {
	schemas.Register(schema_cc3309152ef8d9f0,
		0xa6c71d8345916b7b,
		0xb1b308e89f4237bf,
		0xf7e516726966c831)
}
